type Query {
   departments: [Department]
   department(id: ID!): Department!
}

type Mutation {
   newDepartment(department: DepartmentInput!): Department
}

input DepartmentInput {
   name: String!
   organizationId: Int
}

type Department {
   id: ID!
   name: String!
   organization: Organization
   employees: [Employee]
}

extend type Query {
   organizations: [Organization]
   organization(id: ID!): Organization!
}

extend type Mutation {
   newOrganization(organization: OrganizationInput!): Organization
}

input OrganizationInput {
   name: String!
}

type Organization {
   id: ID!
   name: String!
   employees: [Employee]
   departments: [Department]
}

extend type Query {
   employees: [Employee]
   employeesWithFilter(filter: EmployeeFilter): [Employee]
   employee(id: ID!): Employee!
}

extend type Mutation {
   newEmployee(employee: EmployeeInput!): Employee
}

input EmployeeInput {
   firstName: String!
   lastName: String!
   position: String!
   salary: Int
   age: Int
   organizationId: Int!
   departmentId: Int!
}

type Employee {
   id: ID!
   firstName: String!
   lastName: String!
   position: String!
   salary: Int
   age: Int
   department: Department
   organization: Organization
}

input EmployeeFilter {
   salary: FilterField
   age: FilterField
   position: FilterField
}

input FilterField {
   operator: String!
   value: String!
}